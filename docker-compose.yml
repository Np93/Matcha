version: "3.9"

services:
  backend:
    build:
      context: .
      dockerfile: docker/back/Dockerfile
    container_name: backend
    command: /wait-for-it.sh uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    env_file:
      - .env
    restart: always
    depends_on:
      - db

  frontend:
    build:
      context: .
      dockerfile: docker/front/Dockerfile
      target: dev
    container_name: frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    restart: always
    depends_on:
      - backend
    profiles:
      - dev

  frontend_prod:
    build:
      context: .
      dockerfile: docker/front/Dockerfile
      target: prod
    container_name: frontend
    ports:
      - "80:80"
      - "3000:3000"  # exposé uniquement si nécessaire pour test
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    depends_on:
      - backend
    profiles:
      - prod

  nginx_dev:
    image: nginx:stable-alpine
    container_name: nginx_dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/front/nginx.dev.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - certgen
    profiles:
      - dev

  certgen:
    image: alpine:latest
    container_name: certgen
    volumes:
      - ./docker/ssl:/certs
      - ./docker/certgen/entrypoint.sh:/entrypoint.sh
    entrypoint: /entrypoint.sh
    profiles:
      - dev

  db:
    image: postgres:14
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

volumes:
  db_data:
    name: my_postgres_data_volume # Nom explicite pour le volume